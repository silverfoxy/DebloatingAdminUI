<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Import_coverage extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Report_model');
    }

    /*
     * Import text-based code coverage logs
     */
    function import()
    {   
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $config['upload_path'] = '/var/www/html/admin/uploads/';
            $config['allowed_types'] = 'txt';
            // $config['max_size'] = 100000;
            $config['file_name'] = tempnam('', '');
            $this->load->library('upload', $config);
            if (!$this->upload->do_upload('file'))
            {
                show_error($this->upload->display_errors());  
            }
            else
            {
                try {
                    $fk_software_version_id = $this->input->post('fk_version_id');
                    $original_path_prefix = $this->input->post('original_path_prefix') ?? '';
                    $new_path_prefix = $this->input->post('new_path_prefix') ?? '';
                    $test_name =  $this->input->post('test_name');
                    $results = $this->parse_and_import_file($fk_software_version_id, $test_name, $this->upload->data('full_path'), $original_path_prefix, $new_path_prefix, $data);
                    $data['success_messages'][] = 'Coverage information ('.$test_name.') imported successfully.';
                    $data['success_messages'][] = 'Imported '.$results['added_files'].' files.';
                    $data['success_messages'][] = 'Imported '.$results['added_lines'].' lines.';
                    if ($results['skipped_lines'] > 0) {
                        $data['warning_messages'][] = 'Skipped '.$results['skipped_lines'].' lines.';
                    }
                } catch (\Exception $e) {
                    $data['error_messages'][] = $e->getMessage();
                }
                finally {
                    // Delete the temporary file
                    unlink($this->upload->data('full_path'));
                }
                // Return all tests within a category
                $this->load->model('Test_model');
                $data['tests'] = $this->Test_model->get_all_test_groups();
                $data['_view'] = 'report/groups';
                $this->load->view('layouts/main',$data);
            }

        }
        else
        {         
            $this->load->model('Software_version_model');
            $data['all_software_version'] = $this->Software_version_model->get_all_software_version(); 
            $data['_view'] = 'import_coverage/import';
            $this->load->view('layouts/main',$data);
        }
    }  

    function replace_first($find, $replace, $subject) {
        // stolen from the comments at PHP.net/str_replace
        // Splits $subject into an array of 2 items by $find,
        // and then joins the array with $replace
        return implode($replace, explode($find, $subject, 2));
    }

    protected function parse_and_import_file($fk_software_version_id, $test_name, $file_path, $original_prefix, $new_prefix, &$data) {
        $skipped_lines = 0;
        $file_coverage = [];
        if ($fh = fopen($file_path, 'r')) {
            while (!feof($fh)) {
                $line = fgets($fh);
                try {
                    if (strpos($line, ':') !== false) {
                        $file_entry = explode(': ', $line);
                        $file_name = $file_entry[0];
                        $covered_lines = trim($file_entry[1]);
                        if (strlen($line) >= strlen($original_prefix)) {
                            if (substr($line, 0, strlen($original_prefix)) === $original_prefix) {
                                $file_name = $this->replace_first($original_prefix, $new_prefix, $file_name);
                            }
                        }
                        $covered_lines_array = explode('-', $covered_lines);

                        for ($i=$covered_lines_array[0]; $i <= $covered_lines_array[1]; $i++) {
                            $file_coverage[$file_name][$i] = true;
                        }
                    }
                }
                catch (\Exception $e) {
                    $data['error_messages'][] = $e->getMessage();
                    $skipped_lines++;
                }
            }
            fclose($fh);
        }
        $info = $this->add_coverage_to_db($fk_software_version_id, $test_name, $file_coverage);
        $info['skipped_lines'] = $skipped_lines;
        return $info;
    }

    protected function add_coverage_to_db($fk_software_version_id, $test_name, $file_coverage) {
        $added_files = 0;
        $added_lines = 0;
        // Add a new test
        $this->load->model('Test_model');
        $this->load->model('Software_version_model');
        $this->load->model('Covered_file_model');
        $this->load->model('Covered_line_model');
        $software_id = $this->Software_version_model->get_software_version($fk_software_version_id)['fk_software_id'];
        $params = array(
            'test_name' => $test_name,
            'test_group' => $test_name,
            'test_date' => date('Y-m-d H:i:s'),
            'fk_software_id' => $software_id,
            'fk_software_version_id' => $fk_software_version_id,
        );
        $test_id = $this->Test_model->add_test($params);
        // Add covered files
        foreach ($file_coverage as $file_name => $lines) {
            $params = array(
                'fk_test_id' => $test_id,
                'file_name' => $file_name,
            );
            $covered_file_id = $this->Covered_file_model->add_covered_file($params);
            $added_files++;
            foreach ($lines as $line_number => $value) {
                // Add covered lines
                $params = array(
                    'fk_file_id' => $covered_file_id,
                    'line_number' => $line_number,
                    'run' => $value,
                );
                $covered_line_id = $this->Covered_line_model->add_covered_line($params);
                $added_lines++;
            }
        }
        return array(
            'added_files' => $added_files,
            'added_lines' => $added_lines,
        );
    }

    /*
     * Deleting software
     */
    function remove($id)
    {
        $software = $this->Software_model->get_software($id);

        // check if the software exists before trying to delete it
        if(isset($software['id']))
        {
            $this->Software_model->delete_software($id);
            redirect('software/index');
        }
        else
            show_error('The software you are trying to delete does not exist.');
    }
    
}
